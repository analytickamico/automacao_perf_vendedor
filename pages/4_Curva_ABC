# Curva_ABC.py
import streamlit as st
import pandas as pd
import plotly.graph_objects as go
from utils import get_abc_curve_data_cached, format_currency
from session_state_manager import init_session_state, load_page_specific_state, ensure_cod_colaborador
from utils import get_brand_data
from utils import get_channels_and_ufs
from utils import get_colaboradores
from utils import get_brand_options
from utils import get_team_options
import sys
import os

@st.cache_data
def get_brand_data_cached(cod_colaborador, start_date, end_date, selected_channels, selected_ufs, selected_nome_colaborador):
    return get_brand_data(cod_colaborador, start_date, end_date, selected_channels, selected_ufs, selected_nome_colaborador)

@st.cache_data
def get_channels_and_ufs_cached(cod_colaborador, start_date, end_date):
    return get_channels_and_ufs(cod_colaborador, start_date, end_date)

@st.cache_data
def get_colaboradores_cached(start_date, end_date, selected_channels, selected_ufs):
    return get_colaboradores(start_date, end_date, selected_channels, selected_ufs)

current_dir = os.path.dirname(__file__)
parent_dir = os.path.dirname(current_dir)
ico_path = os.path.join(parent_dir, "favicon.ico")

def load_filters():
    ensure_cod_colaborador()
    user = st.session_state.get('user', {})
    
    if user.get('role') in ['admin', 'gestor']:
        st.session_state['cod_colaborador'] = st.sidebar.text_input("Código do Colaborador (deixe em branco para todos)", st.session_state.get('cod_colaborador', ''), key="cod_colaborador_input")
    #elif user.get('role') == 'vendedor':
        #st.sidebar.info(f"Código do Colaborador: {st.session_state.get('cod_colaborador', '')}")
    else:
        st.sidebar.info(f"Código do Colaborador: {st.session_state.get('cod_colaborador', '')}")
        #return

    st.session_state['start_date'] = st.sidebar.date_input("Data Inicial", st.session_state.get('start_date', date.today()), key="start_date_input")
    st.session_state['end_date'] = st.sidebar.date_input("Data Final", st.session_state.get('end_date', date.today()), key="end_date_input")

    channels, ufs = get_channels_and_ufs_cached(st.session_state.get('cod_colaborador', ''), st.session_state['start_date'], st.session_state['end_date'])
    
    st.session_state['selected_channels'] = st.sidebar.multiselect("Selecione os canais de venda", options=channels, default=st.session_state.get('selected_channels', []), key="channels_multiselect")

    if user.get('role') in ['admin', 'gestor']:
        team_options = get_team_options(st.session_state['start_date'], st.session_state['end_date'])
        st.session_state['selected_teams'] = st.sidebar.multiselect("Selecione as equipes", options=team_options, default=st.session_state.get('selected_teams', []), key="teams_multiselect")
    #else:
        #st.warning("Tipo de usuário não reconhecido.")
        #return

    st.session_state['selected_ufs'] = st.sidebar.multiselect("Selecione as UFs", options=ufs, default=st.session_state.get('selected_ufs', []), key="ufs_multiselect")

    # Adicionar carga de marcas
    brand_options = get_brand_options(st.session_state['start_date'], st.session_state['end_date'])
    st.session_state['selected_brands'] = st.sidebar.multiselect("Selecione as marcas", options=brand_options, default=st.session_state.get('selected_brands', []), key="brands_multiselect")

    if user.get('role') in ['admin', 'gestor']:
        colaboradores_df = get_colaboradores_cached(st.session_state['start_date'], st.session_state['end_date'], st.session_state['selected_channels'], st.session_state['selected_ufs'])
        available_colaboradores = colaboradores_df['nome_colaborador'].tolist() if not colaboradores_df.empty else []
        st.session_state['selected_colaboradores'] = st.sidebar.multiselect("Selecione os colaboradores (deixe vazio para todos)", options=available_colaboradores, default=st.session_state.get('selected_colaboradores', []), key="colaboradores_multiselect")



    if st.sidebar.button("Atualizar Dados", key="update_data_button"):
        st.session_state['data_needs_update'] = True

def main():
    init_session_state()
    load_page_specific_state("Curva_ABC")
    ensure_cod_colaborador()

    st.set_page_config(page_title="Curva ABC", page_icon=ico_path, layout="wide")
    st.title("Curva ABC de Produtos")

    # Carregar filtros (similar à página Performance_Vendedor)
    load_filters()

    # Carregar dados
    df = get_abc_curve_data_cached(
        st.session_state.get('cod_colaborador', ''),
        st.session_state['start_date'],
        st.session_state['end_date'],
        st.session_state['selected_channels'],
        st.session_state['selected_ufs'],
        st.session_state['selected_brands'],
        st.session_state.get('selected_colaboradores', []),
        st.session_state.get('selected_teams', [])
    )

    if df is not None and not df.empty:
        # Resumo geral da Curva ABC
        st.subheader("Resumo da Curva ABC")
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Produtos A", f"{len(df[df['curva'] == 'A'])} ({len(df[df['curva'] == 'A']) / len(df):.1%})")
        with col2:
            st.metric("Produtos B", f"{len(df[df['curva'] == 'B'])} ({len(df[df['curva'] == 'B']) / len(df):.1%})")
        with col3:
            st.metric("Produtos C", f"{len(df[df['curva'] == 'C'])} ({len(df[df['curva'] == 'C']) / len(df):.1%})")

        # Top 10 produtos de cada curva
        st.subheader("Top 10 Produtos por Curva")
        tab1, tab2, tab3 = st.tabs(["Curva A", "Curva B", "Curva C"])
        
        for tab, curva in zip([tab1, tab2, tab3], ['A', 'B', 'C']):
            with tab:
                top_10 = df[df['curva'] == curva].head(10)
                st.dataframe(
                    top_10[['sku', 'nome_produto', 'marca', 'faturamento_liquido', 'quantidade_vendida']].style.format({
                        'faturamento_liquido': lambda x: format_currency(x),
                        'quantidade_vendida': '{:,.0f}'.format
                    })
                )

        # Gráfico de distribuição da Curva ABC
        st.subheader("Distribuição da Curva ABC")
        fig = go.Figure()
        fig.add_trace(go.Scatter(x=df['faturamento_acumulado'], y=df['faturamento_liquido'], mode='lines'))
        fig.add_shape(type="line", x0=0.8, y0=0, x1=0.8, y1=df['faturamento_liquido'].max(), line=dict(color="red", width=2, dash="dash"))
        fig.add_shape(type="line", x0=0.95, y0=0, x1=0.95, y1=df['faturamento_liquido'].max(), line=dict(color="green", width=2, dash="dash"))
        fig.update_layout(
            title="Distribuição da Curva ABC",
            xaxis_title="Faturamento Acumulado",
            yaxis_title="Faturamento Líquido",
            xaxis=dict(tickformat=".0%"),
            yaxis=dict(tickformat="$,.0f")
        )
        st.plotly_chart(fig, use_container_width=True)

    else:
        st.warning("Não há dados disponíveis para o período e filtros selecionados.")

if __name__ == "__main__":
    main()